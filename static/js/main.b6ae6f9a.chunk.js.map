{"version":3,"sources":["components/navigation.js","components/header.js","components/intro.js","components/footer.js","components/mainPages/homePage.js","components/payment.js","components/cheesecakeSelector.js","components/mainPages/orderPage.js","components/modal.js","components/mainPages/cheesecakePage.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","Header","src","Intro","Footer","href","target","HomePage","Payment","props","purchaseAmount","amount","this","onSuccess","details","console","log","alert","React","Component","CheesecakeSelector","sendData","uniqueID","removeCheesecakeClick","changeQty","event","currentQty","state","qty","newQty","parseInt","value","tempCost","cost","adjustmentCost","adjustTotal","updateOrder","type","cheesecake","value2","price","request","specialRequest","setState","handleChange","bind","handleChange2","handleChange4","cheesecakeTypes","cheesecakes","selectorValues","baseCost","adjCost","Cakes","adjprice","tempSelectorValues","tempCakes","forEach","cake","push","name","cakes","newCost","newCake","options","options2","index","key","replace","length","onClick","id","min","max","onChange","placeholder","OrderPage","removeCheesecake","uniqueIDToRemove","cheesecakeSelectors","selectors","newOrder","cheesecakeOrdered","indexLocation","selector","splice","changeOrderedCheesecake","orderedCheesecake","costAdjustmentValue","totalCost","addCheesecake","handleSubmit","paymentSuccessful","newDate","Date","setDate","getDate","typesAreLoaded","contactInformation","firstName","lastName","phoneNumber","email","address","city","zip","deliveryDate","errorLog","ordered","self","axios","get","then","response","data","catch","error","status","message","config","tempOrder","newArray","newUniqueID","validateInfo","date","tempErrorLog","addError","removeError","removeIndex","test","preventDefault","errorFields","errorField","contactInfo","post","orderedCheesecakes","stateOptions","onSubmit","htmlFor","selected","updateDate","minDate","withPortal","portalId","placeholderText","map","cheesecakeSelector","Fragment","modalRoot","document","getElementById","Modal","element","createElement","appendChild","removeChild","createPortal","children","CheesecakePage","toggleModal","modalCheesecake","cheesecakeName","getAttribute","filter","showModal","cheesecakesAreLoaded","toUpperCase","substring","image","data-cheesecaketype","data-cheesecakename","data-cheesecakeindex","alt","description","Type","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6ae6f9a.chunk.js","sourcesContent":["// Import supporting files\nimport React from \"react\";\nimport { Link } from 'react-router-dom'; // import Link for router\n\n// Create Navigation component\n\nconst Navigation = () => {\n   \n    // Display navigation for the user\n    return (\n        <div className=\"navigation\">\n            <ul>\n                <li className=\"active\"><Link to=\"/TastefullyTiffanysCheesecakes\">Home</Link></li>\n                <li><Link to=\"/TastefullyTiffanysCheesecakes/cheesecakes\">Cheesecakes</Link></li>\n                <li><Link to=\"/TastefullyTiffanysCheesecakes/placeorder\">Order</Link></li>\n            </ul>\n        </div>\n    );\n}\n\nexport default Navigation;","// Import supporting files\nimport React from \"react\";\n\n// Create Header component\n\nconst Header = () => {\n   \n    // Display Header for the user\n    return (\n        <div className=\"topheader\">\n            <img src=\"TastefullyTiffanysCheesecakes/img/TTC_LOGO.png\"></img>\n        </div>\n    );\n}\n\nexport default Header;","// Import supporting files\nimport React from \"react\";\n\n// Create Intro component\n\nconst Intro = () => {\n   \n    // Display Intro for the user\n    return (\n        <div className=\"introContainer\">\n            <div className=\"intro\">\n                <p>Every occasion deserves a Cheesecake!</p>\n                <p>Welcome to Tastefully Tiffany's Cheesecake Bakery! Where every flavor is an experience, and every cheesecake is an extravaganza! Come see what people have been raving about, and try one for yourself!</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Intro;","// Import supporting files\nimport React from \"react\";\n\n// Create Footer component\n\nconst Footer = () => {\n   \n    // Display footer for the user\n    return (\n        <div className=\"footer\">\n            <div>\n                <div><b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Phone:</b><p>&nbsp;&nbsp;(979)-201-3200</p></div>\n                <div><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email:</b> <p>&nbsp;&nbsp;tastefullytiffanyscheesecakes@gmail.com</p></div> \n            </div>\n            <a className='icons' href='https://www.facebook.com/tastefullytiffanyscheesecakes' target=\"_blank\"><img src=\"/TastefullyTiffanysCheesecakes/img/f_logo_RGB-Black_58.png\"></img></a>\n            <a href='https://www.instagram.com/tastefullytiffanyscheesecakes/?igshid=fmhozwz40qcs' target=\"_blank\"><img src=\"/TastefullyTiffanysCheesecakes/img/glyph-logo_May2016.png\"></img></a>\n        </div>\n    );\n}\n\nexport default Footer;","// Import supporting files\nimport React from \"react\";\n\n// Import supporting components\nimport Navigation from '../navigation';\nimport Header from '../header';\nimport Intro from '../intro';\nimport Footer from '../footer';\n\n// Create HomePage component\n\nconst HomePage = () => {\n   \n    // Display navigation for the user\n    return (\n        <div>\n            <Navigation />\n            <Header />\n            <Intro />\n            <Footer />\n        </div>\n    );\n}\n\nexport default HomePage;","import React from 'react';\nimport { PayPalButton } from \"react-paypal-button-v2\";\n\nclass Payment extends React.Component \n{\n    constructor( props ) \n    {\n            super( props );\n            // We create an element div for this modal\n            this.purchaseAmount = props.amount;\n    }\n\n    // We append the created div to the div#modal\n    componentDidMount() \n    {\n    }\n\n    componentWillUnmount() \n    {\n    }\n\n    render() \n    {\n        return (\n            <PayPalButton\n                amount={this.purchaseAmount}\n                // shippingPreference=\"NO_SHIPPING\" // default is \"GET_FROM_FILE\"\n                onSuccess={(details) => {\n                    \n                    console.log(details);\n                    alert(\"Transaction completed by \" + details);\n\n                    // OPTIONAL: Call your server to save the transaction\n                    // return fetch(\"/paypal-transaction-complete\", {\n                    //     method: \"post\",\n                    //     body: JSON.stringify({\n                    //         orderID: data.orderID\n                    //     })\n                    // });\n                }}\n            />\n        );\n    }\n}\nexport default Payment;","// Import supporting files\nimport React, { Fragment } from \"react\";\n\n// Create CheesecakeSelector component\n\nexport default class CheesecakeSelector extends React.Component {\n\n    /*\n        Constructor - this contstructor helps setup the state for the component.\n        cheesecakeTypes - array of types of cheesecakes from the database. Consists of 3 properties\n              index: Integer - index in database\n               type: String - description of the group of cheesecakes\n              price: Integer - general price of cheesecake group\n        selectorValues - Array of strings for cheesecake types\n        value - String cheesecake type\n        value2 - String cheesecake name\n        specialRequest - String request from the user\n        cost - Integer\n        qty - Integer\n    */\n\n    constructor(props) \n    {\n      super(props);\n\n      // Make the functions of this class available\n\n      this.handleChange = this.handleChange.bind(this);\n      this.handleChange2 = this.handleChange2.bind(this);\n      this.handleChange4 = this.handleChange4.bind(this);\n\n      // Setup the initial state of the selector page\n\n      this.state = {\n          cheesecakeTypes: props.cheesecakes,\n          selectorValues: [],\n          value: '', \n          value2: '', \n          specialRequest: '', \n          cost: 0, \n          qty: 1\n        };\n    }\n\n    /**************************************************************************************************************\n        componentDidMount\n        parameters: N/A\n        Return: N/A\n        description: The componentDidMount function is used to setup the initial values for the display of the \n                     selector.\n    **************************************************************************************************************/\n\n    componentDidMount()\n    {\n        // setup temp variables\n        let baseCost = this.state.cheesecakeTypes[0].price;\n        let adjCost = this.state.cheesecakeTypes[0].Cakes[0].adjprice;\n        let tempSelectorValues = [];\n        let tempCakes = [];\n\n        // setup selectorValues from the cheesecakeTypes\n        this.state.cheesecakeTypes.forEach(type => {\n            type.Cakes.forEach( cake => {\n                tempCakes.push(cake.name);\n            });\n            tempSelectorValues.push({type: type.type, cakes: tempCakes});\n            tempCakes = [];\n        });\n\n        // update the state\n        this.setState({\n            selectorValues: tempSelectorValues,\n            value: this.state.cheesecakeTypes[0].type,\n            value2: this.state.cheesecakeTypes[0].Cakes[0].name,\n            cost: baseCost + adjCost\n        });\n\n        // update the total with new cost\n        this.props.adjustTotal(baseCost + adjCost);\n    }\n\n    /**************************************************************************************************************\n        componentWillUnmount\n        parameters: N/A\n        Return: N/A\n        description: The function will update the cost for the user.\n    **************************************************************************************************************/\n\n    componentWillUnmount()\n    {\n        var tempCost = this.state.cost*this.state.qty*-1;\n        this.props.adjustTotal((tempCost));\n    }\n\n    /**************************************************************************************************************\n        sendData\n        parameters: N/A\n        Return: N/A\n        description: The function will send to order page the unique id to remove the selector from view.\n    **************************************************************************************************************/\n\n    sendData = () =>\n    {\n        let uniqueID = this.props.uniqueID;\n        this.props.removeCheesecakeClick(uniqueID);\n    }\n\n    /**************************************************************************************************************\n        changeQty\n        parameters: event\n        Return: N/A\n        description: The function will update the qty of cheesecakes and then update the total and order details\n                     on the order page.\n    **************************************************************************************************************/\n\n    changeQty = (event) =>\n    {\n        // setup the temp variables with info from event\n        let currentQty = this.state.qty;\n        let newQty = parseInt(event.target.value);\n        let tempCost = this.state.cost;\n        let adjustmentCost = ((tempCost*currentQty) - (tempCost*newQty))*-1\n\n        // update the order \n        this.props.adjustTotal((adjustmentCost));\n        this.props.updateOrder({uniqueID: this.props.uniqueID, type: this.state.value, cheesecake: this.state.value2, qty: newQty, price: this.state.cost, request: this.state.specialRequest})\n        this.setState({qty: newQty})\n    }\n  \n    /**************************************************************************************************************\n        handleChange\n        parameters: event\n        Return: N/A\n        description: The function will update the state value and then update the cost and order details\n                     on the order page.\n    **************************************************************************************************************/\n\n    handleChange(event) \n    {\n        // setup temp variables\n        var tempCost = this.state.cost;\n        var newCost = 0;\n        var newCake = '';\n\n        // loop through cheesecake types to find the cheesecake selected and adjust the cost\n        this.state.cheesecakeTypes.forEach((type) => \n        {\n            if (event.target.value === type.type) \n            {\n                this.props.adjustTotal((tempCost-type.price)*this.state.qty*-1);\n                newCost = type.price;\n                newCake = type.Cakes[0].name;\n            }\n        });\n\n        // update the order with new information\n        this.props.updateOrder({uniqueID: this.props.uniqueID, type: event.target.value, cheesecake: newCake, qty: this.state.qty, price: newCost, request: this.state.specialRequest})\n\n        // set the state with the new information\n        this.setState({value: event.target.value, value2: newCake, cost: newCost});\n    }\n\n    /**************************************************************************************************************\n        handleChange2\n        parameters: event\n        Return: N/A\n        description: The function will update the state value2 and then update the order details\n                     on the order page.\n    **************************************************************************************************************/\n\n    handleChange2(event) \n    {\n\n        // update the order with new information\n        this.props.updateOrder({uniqueID: this.props.uniqueID, type: this.state.value, cheesecake: event.target.value, qty: this.state.qty, price: this.state.cost, request: this.state.specialRequest})\n\n        // set the state with the new information\n        this.setState({value2: event.target.value});\n    }\n\n    /**************************************************************************************************************\n        handleChange4\n        parameters: event\n        Return: N/A\n        description: The function will update the state request and then update the order details\n                     on the order page.\n    **************************************************************************************************************/\n\n    handleChange4(event) \n    {\n        this.props.updateOrder({uniqueID: this.props.uniqueID, type: this.state.value, cheesecake: this.state.value2, qty: this.state.qty, price: this.state.cost, request: event.target.value})\n        this.setState({specialRequest: event.target.value});\n    }\n  \n    render() \n    {\n        // Get necessary state variables\n        const { selectorValues } = this.state;\n        let options = [];\n        let options2 = [];\n\n        selectorValues.forEach((value, index) => \n        {\n\n           options.push(<option value={value.type} key={index}>{value.type} Cheesecake</option>)\n\n           if (this.state.value === value.type) \n           {\n               value.cakes.forEach((cake, index) => \n               {\n                   options2.push(<option value={cake} key={index}>{cake.replace(' Cheesecake', '')}</option>)\n               })\n           }\n\n        });\n\n        if (options2.length < 2) \n        {\n            return(\n                <Fragment>\n                    <br />\n                    <br />\n                    <br />\n                    <button type=\"button\" onClick={this.sendData}> Remove Cheesecake </button>\n                    <label className=\"quantity\">QTY: </label> <input type=\"number\" id=\"quantity\" name=\"quantity\" value={this.state.qty}\n            min=\"1\" max=\"100\" onChange={this.changeQty}></input>\n                    <label className=\"cheesecakeSelector\"> Cheesecake Type: </label>\n                    <select value={this.state.value} onChange={this.handleChange}>\n                        { options }\n                    </select>  \n                    <textarea value={this.state.specialRequest} placeholder=\"Speical Request...\" onChange={this.handleChange4} />\n                    <br />\n                </Fragment>\n                \n            );\n        } \n        else \n        {\n            return(\n                <Fragment>\n                    <br />\n                    <br />\n                    <br />\n                    <button type=\"button\" onClick={this.sendData}> Remove Cheesecake </button>\n                    <label className=\"quantity\">QTY: </label> <input type=\"number\" id=\"quantity\" name=\"quantity\" value={this.state.qty}\n            min=\"1\" max=\"100\" onChange={this.changeQty}></input>\n                    <label className=\"cheesecakeSelector\"> Cheesecake Type: </label>\n                    <select value={this.state.value} onChange={this.handleChange}>\n                        { options }\n                    </select> \n                    <label className=\"cheesecakeSelector\"> {this.state.value}: </label>\n                     <select value={this.state.value2} onChange={this.handleChange2}>\n                        { options2 }\n                     </select>\n                     <br /> \n                    <textarea value={this.state.specialRequest} placeholder=\"Speical Request...\" onChange={this.handleChange4} />\n                    <br />\n                </Fragment>  \n            );\n        }      \n    }\n  }","// Import supporting files\nimport React, { Fragment } from \"react\";\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// Import supporting components\nimport Navigation from '../navigation';\nimport Footer from '../footer';\nimport Payment from '../payment';\nimport CheesecakeSelector from '../cheesecakeSelector';\n\n// Create OrderPage component\n\nexport default class OrderPage extends React.Component \n{\n\n    /*\n        Constructor - this contstructor helps setup the state for the component.\n\n        cheesecakeTypes - array of types of cheesecakes from the database. Consists of 3 properties\n              index: Integer - index in database\n               type: String - description of the group of cheesecakes\n              price: Integer - general price of cheesecake group\n\n        typesAreLoaded - boolean to indicate the cheesecake types were retrieved from the database\n        cheesecakeSelectors - Array of the component cheesecakeSelector\n        cheesecakesOrdered - Array of the cheesecakes the user selected on order form\n\n        contactInformation - Object of types of information from the user in the order form. Consists of 9 properties\n                 firstName: String - user first name\n                  lastName: String - user last name\n               phoneNumber: String - phone number of user\n                     email: String - email of user\n                   address: String - address of user\n                      city: String - city of user\n                     state: String - state of user\n                       zip: Integer - zip code of user\n              deliveryDate: Date - delivery date of user\n\n        errorLog - Array of errors detected on the form\n        ordered - boolean to detect when the user submits valid information for the order\n        uniqueID - Integer used to identify the cheesecakeSelector in the array when they are added to the page\n        totalCost - Integer used to show user the total cost of their selections\n    */\n\n    constructor(props) \n    {\n      super(props);\n  \n      // Make the functions of this class available to specifically the cheesecakeSelector component\n\n      this.addCheesecake = this.addCheesecake.bind(this);\n      this.removeCheesecake = this.removeCheesecake.bind(this);\n      this.changeOrderedCheesecake = this.changeOrderedCheesecake.bind(this);\n      this.adjustTotal = this.adjustTotal.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.paymentSuccessful = this.paymentSuccessful.bind(this);\n\n      // Get a new date and add 2 days (48 hr lead time for cheesecakes)\n      let newDate = new Date();\n      newDate.setDate(newDate.getDate() + 2);\n\n      // Setup the initial state of the order page\n      this.state = {\n            typesAreLoaded: false,\n            cheesecakeTypes: null,\n            cheesecakeSelectors: [],\n            cheesecakeOrdered: [],\n            contactInformation: {\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n                email: '',\n                address: '',\n                city: '',\n                state: 'TX',\n                zip: '',\n                deliveryDate: newDate\n            },\n            errorLog: [],\n            ordered: false,\n            uniqueID: 0,\n            totalCost: 0\n        };\n    }\n\n    /**************************************************************************************************************\n        componentDidMount\n        parameters: N/A\n        Return: N/A\n\n        description: The componentDidMount function is used to makes calls to the database for the types of cheesecakes.\n                     If successful it will update the following information in the state:\n\n                     cheesecakeTypes, typesAreLoaded\n    **************************************************************************************************************/\n\n    componentDidMount()\n    {\n        var self = this;\n\n        // Make a call to the api for the complete list of cheesecake types\n        //https://ttcapi.azurewebsites.net\n        axios.get(`https://ttcapi.azurewebsites.net/api/cheesecake-types`)\n        .then(response => {\n            \n            // Set the state on successful return of cheesecake types data\n            this.setState({\n                typesAreLoaded: true,             // data is loaded\n                cheesecakeTypes: response.data    // set the cheesecakeTypes state variable to the response data\n            });\n\n            this.addCheesecake();\n        })\n        .catch(error => { \n\n            // Check to see if the server responded with an error and response for the error\n            if (error.response) \n                {\n                    // If the server responds with a status of 500 set the error state to true for the redirect to error page\n                    if (error.response.status === 500) \n                    {\n                        self.setState({error: true});\n                    }\n                } \n                else if (error.request) \n                {\n                    // The request was made but no response was received\n                    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                    // http.ClientRequest in node.js\n                    console.log(error.request);\n                } \n                else \n                {\n                    // Something happened in setting up the request that triggered an Error\n                    console.log('Error', error.message);\n                }\n\n                console.log(error.config); \n        })\n    }\n  \n    /**************************************************************************************************************\n        addCheesecake\n        parameters: N/A\n        Return: N/A\n\n        description: The addCheesecake function is used to add cheesecake selectors to the page for the user.\n    **************************************************************************************************************/\n\n    addCheesecake() \n    {\n        // setup temp variables for adding new selector to the page\n        let tempOrder = [];\n        let newArray = this.state.cheesecakeSelectors;\n        let newUniqueID = this.state.uniqueID + 1;\n\n        // make a new cheesecake selector and add to the array\n        newArray.push(<CheesecakeSelector removeCheesecakeClick={this.removeCheesecake} updateOrder={this.changeOrderedCheesecake} adjustTotal={this.adjustTotal} cheesecakes={this.state.cheesecakeTypes} uniqueID={newUniqueID}/>);\n\n        // for the cheesecake added to the page, update the order information with the default information of the cheesecake added and put on array\n        tempOrder = this.state.cheesecakeOrdered;\n        tempOrder.push({uniqueID: newUniqueID, type: this.state.cheesecakeTypes[0].type, cheesecake: this.state.cheesecakeTypes[0].Cakes[0].name, qty: 1, price: this.state.cheesecakeTypes[0].price + this.state.cheesecakeTypes[0].Cakes[0].adjprice, request: '' });\n\n        // update the state with the new information\n        this.setState({ cheesecakeSelectors: newArray, cheesecakeOrdered: tempOrder, uniqueID: newUniqueID });\n    }\n\n    /**************************************************************************************************************\n        removeCheesecake\n        parameters: uniqueIDToRemove - Integer\n        Return: N/A\n\n        description: The removeCheesecake function is used to remove cheesecake selectors to the page for the user.\n    **************************************************************************************************************/\n\n    removeCheesecake = (uniqueIDToRemove) => \n    {\n        // Check to see if we have more than 1 cheesecake on the screen. \n\n        if (this.state.cheesecakeSelectors.length > 1)\n        {\n            // setup temp variables\n            let selectors = this.state.cheesecakeSelectors;\n            let newOrder = this.state.cheesecakeOrdered;\n            var indexLocation = -1;\n\n            // loop through all selectors to see which one matches the id to remove\n            selectors.forEach((selector,index) => {\n                \n                // check to see if the uniqueID matches the selector uniqueID\n                if (selector.props.uniqueID === uniqueIDToRemove) \n                {\n                    indexLocation = index;   \n                }\n            });\n\n            // Remove selector and order infomration from the arrays\n            selectors.splice(indexLocation, 1);\n            newOrder.splice(indexLocation, 1);\n            \n            // update the state with the adjusted information for selectors and order\n            this.setState({ cheesecakeSelectors: selectors, cheesecakeOrdered: newOrder });\n        } \n    }\n\n    /**************************************************************************************************************\n        changeOrderedCheesecake\n        parameters: cheescake - Object\n                        uniqueID - Integer to identify cheescake selector information\n                        type - String to indentify cheesecake type\n                        cheesecake - String to identify cheesecake name\n                        qty - Integer the amount the user wants\n                        price - cost of the user selection\n                        request - special request information from the user\n        Return: N/A\n\n        description: The changeOrderedCheesecake function is used to update order information for the user.\n    **************************************************************************************************************/\n\n    changeOrderedCheesecake = (cheesecake) =>\n    {\n        // setup temp variables \n        let newOrder = this.state.cheesecakeOrdered;\n        var indexLocation = -1;\n\n        // loop through all order to see which one matches the id to update\n        newOrder.forEach((orderedCheesecake,index) => {\n            \n            // check to see if the uniqueID matches the order uniqueID\n            if (cheesecake.uniqueID === orderedCheesecake.uniqueID) \n            {\n                indexLocation = index;   \n            }\n        });\n\n        // update the specific order with new cheesecake information\n        newOrder.splice(indexLocation, 1, cheesecake);\n\n        // update the state with the adjusted information for order\n        this.setState({ cheesecakeOrdered: newOrder });\n\n    }\n\n    /**************************************************************************************************************\n        adjustTotal\n        parameters: costAdjustmentValue - Integer\n        Return: N/A\n\n        description: The function adjusts the total for the user.\n    **************************************************************************************************************/\n\n    adjustTotal = (costAdjustmentValue) => \n    {\n        // Setup temp variables and adjust with costAdjustmentValue\n        var tempCost = this.state.totalCost;\n        tempCost = tempCost + costAdjustmentValue;\n\n        // update totalCost in the state\n        this.setState({totalCost: tempCost});\n    }\n\n    /**************************************************************************************************************\n        handleChange\n        parameters: event - object\n        Return: N/A\n\n        description: The function takes the event from the form and updates state values for the changing inputs.\n    **************************************************************************************************************/\n\n    handleChange(event)\n    {\n\n        // setup temp info\n        let contactInformation = this.state.contactInformation;\n        contactInformation[event.target.id] = event.target.value;\n        \n        // validate the information that is changing\n        this.validateInfo(event.target.id, event.target.value);\n\n        // update the contactInformation in the state\n        this.setState({contactInformation: contactInformation});\n        \n    }\n\n    /**************************************************************************************************************\n        updateDate\n        parameters: date - date\n        Return: N/A\n\n        description: The function takes the date from the form and updates date values for the changing inputs.\n    **************************************************************************************************************/\n\n    updateDate(date)\n    {\n        // setup temp variables and udpate the date in contactInformation\n        let contactInformation = this.state.contactInformation;\n        contactInformation['deliveryDate'] = date;\n\n        // update contactInformation in state\n        this.setState({contactInformation: contactInformation});\n    }\n\n    /**************************************************************************************************************\n        validateInfo\n        parameters: id - Integer\n                    value - String or Integer\n        Return: N/A\n\n        description: The function validates the input from the form to help user enter correct information.\n    **************************************************************************************************************/\n\n    validateInfo(id, value)\n    {\n        let tempErrorLog = this.state.errorLog;\n        let addError = true;\n        let removeError = false;\n        let removeIndex = -1;\n        \n        if (id === 'firstName') \n        {\n            if (value === '') \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'First Name') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('First Name');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'First Name') \n                    {\n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (id === 'lastName') \n        {\n            if (value === '') \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'Last Name') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('Last Name');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'Last Name') \n                    {   \n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n        \n        if (id === 'phoneNumber') \n        {\n            var regex = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/g;\n            \n            if (!regex.test(value)) \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'Phone Number') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('Phone Number');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'Phone Number') \n                    {   \n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (id === 'email') \n        {\n            var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n            \n            if (!regex.test(value)) \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'Email') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('Email');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'Email') \n                    {   \n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (id === 'address') \n        {\n            if (value === '') \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'Address') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('Address');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'Address') \n                    {\n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (id === 'city') \n        {\n            if (value === '') \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'City') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('City');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'City') \n                    {\n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (id === 'state') \n        {\n            if (value === '') \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'State') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('State');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'State') \n                    {\n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (id === 'zip') \n        {\n            var zipCodePattern = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n\n            if (!zipCodePattern.test(value)) \n            {\n                tempErrorLog.forEach(error => \n                {\n                    if (error === 'Zip') \n                    {\n                        addError = false;\n                    }\n                        \n                }) \n\n                if (addError) \n                {\n                    tempErrorLog.push('Zip');\n                }\n            }\n            else\n            {\n                tempErrorLog.forEach( (error, index) => \n                {\n                    if (error === 'Zip') \n                    {\n                        removeError = true;\n                        removeIndex = index;\n                    }\n                        \n                }) \n                \n                if (removeError) \n                {\n                    tempErrorLog.splice(removeIndex, 1);\n                }\n            }\n        }\n\n        if (this.state.cheesecakeOrdered.length < 1) \n        {\n            tempErrorLog.forEach(error => \n            {\n                if (error === 'Cheesecake') \n                {\n                    addError = false;\n                }\n                    \n            }) \n\n            if (addError) \n            {\n                tempErrorLog.push('Cheesecake');\n            }\n        }\n        else\n        {\n            tempErrorLog.forEach( (error, index) => \n            {\n                if (error === 'Cheesecake') \n                {\n                    removeError = true;\n                    removeIndex = index;\n                }\n                    \n            }) \n            \n            if (removeError) \n            {\n                tempErrorLog.splice(removeIndex, 1);\n            }\n        }\n\n        this.setState({errorLog: tempErrorLog});\n        \n    }\n\n    /**************************************************************************************************************\n        handleSubmit\n        parameters: event\n        Return: N/A\n\n        description: The function handles the submit of the form, calls to validate the data and calls api to send \n                     email with information.\n    **************************************************************************************************************/\n\n    handleSubmit(event) \n    {      \n        // Validate the inputs from the user\n        this.validateInfo('firstName', this.state.contactInformation.firstName);\n        this.validateInfo('lastName', this.state.contactInformation.lastName);\n        this.validateInfo('phoneNumber', this.state.contactInformation.phoneNumber);\n        this.validateInfo('email', this.state.contactInformation.email);\n        this.validateInfo('address', this.state.contactInformation.address);\n        this.validateInfo('city', this.state.contactInformation.city);\n        this.validateInfo('state', this.state.contactInformation.state);\n        this.validateInfo('zip', this.state.contactInformation.zip); \n\n        // check to make sure atleast 1 cheesecake is ordered and no errors are present in the form\n        if (this.state.cheesecakeOrdered.length < 1) \n        {\n            // let user know they have not selected a cheesecake\n            alert('You forgot to select a cheesecake...you will be missing out on some great cheesecakes!');\n            event.preventDefault();\n        }\n        else if (this.state.errorLog.length > 0) \n        {\n            // setup text for error for the user\n            let errorFields = '';\n\n            // loop through errorLog array and format text for user display\n            this.state.errorLog.forEach(errorField => {\n                errorFields += errorField + '\\n';\n            })\n\n            // alert user to errors in the form\n            alert('Please correct the following information: \\n\\n' + errorFields);\n            event.preventDefault();\n        }\n        else \n        {       \n            this.setState({ordered: true});\n            event.preventDefault();\n        }\n    }\n\n    paymentSuccessful()\n    {\n\n        console.log('made it to payment successful');\n        \n        // information is good lets send the order information to the user and Tiffany\n        let contactInfo = this.state.contactInformation;\n        let cheesecakes = this.state.cheesecakeOrdered; \n\n        axios.post(`https://ttcapi.azurewebsites.net/api/send-mail`, { contactInfo: contactInfo, orderedCheesecakes: cheesecakes })\n        .then(function (response) \n        {\n            // call sign in function\n            alert('Order processed! Thank you and please check your email for order summary.');\n            \n        })\n        .catch(function (error) {\n            console.log(error);\n            \n            alert(error);\n                    \n        });\n    }\n\n  \n    render() {\n\n        let stateArray = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\n        let stateOptions = [];\n\n        stateArray.forEach((state, index) =>\n        {\n            stateOptions.push(<option value={state} key={index}>{state}</option>)\n        });\n        \n        return(\n            <Fragment>\n                <Navigation />\n                <form onSubmit={this.handleSubmit}>\n\n                    <label className=\"title\">ORDER FORM</label>\n\n                    <label className=\"subtitle\">CONTACT INFORMATION</label>\n\n                    <label htmlFor=\"firstName\" className=\"first-name\">First:</label>\n                    <input id=\"firstName\" type=\"text\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"lastName\" className=\"last-name\">Last:</label>\n                    <input id=\"lastName\" type=\"text\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"phoneNumber\" className=\"phoneNumber\">Phone #:</label>\n                    <input id=\"phoneNumber\" type=\"tel\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"email\" className=\"email\">Email:</label>\n                    <input id=\"email\" type=\"email\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"address\" className=\"address\">Address:</label>\n                    <input id=\"address\" type=\"text\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"city\" className=\"city\">City:</label>\n                    <input id=\"city\" type=\"text\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"state\" className=\"state\">State:</label>\n                    <select className=\"state\" id=\"state\" value={this.state.contactInformation.state} onChange={this.handleChange}>\n                        { stateOptions }\n                    </select>\n\n                    <label htmlFor=\"zip\" className=\"zip\">Zip Code:</label>\n                    <input id=\"zip\" type=\"text\" onChange={this.handleChange}/>\n\n                    <label htmlFor=\"deliveryDate\" className=\"deliveryDate\">Delivery Date:</label>\n                    <DatePicker\n                        selected={this.state.contactInformation.deliveryDate}\n                        onChange={date => this.updateDate(date)}\n                        minDate={this.state.contactInformation.deliveryDate}\n                        withPortal\n                        portalId=\"deliveryDate\"\n                        placeholderText=\"Select a delivery date\"/>\n\n                    <label className=\"note\">* Only deliver to the following areas in TX: Brazoria, Matagorda, Fort Bend, and Harris Counties</label>\n                    <hr />\n\n                    <label className=\"subtitle\">CHEESECAKES</label>\n                    {\n                        this.state.cheesecakeSelectors.map((cheesecakeSelector) => (\n                            <React.Fragment key={cheesecakeSelector.props.uniqueID}>\n                                { cheesecakeSelector }\n                            </React.Fragment>))\n                    }\n\n                    <button type=\"button\" onClick={this.addCheesecake}> Add Cheesecake </button> \n                    <hr />\n\n                    <label className=\"subtitle\">ORDER SUMMARY</label>\n\n                    <label className=\"totalCost\">Total Cost: ${this.state.totalCost}</label>\n\n                    \n                    { this.state.ordered ?  <div className='paymentOption'> <Payment amount={this.state.totalCost} paymentSuccessful={this.paymentSuccessful}/></div> : <button className=\"myButton\">Submit</button>}\n\n                    \n                    \n                </form>\n                \n                <Footer />\n                \n            </Fragment>\n        );\n    \n    }\n  }","import React from 'react';\nimport { createPortal } from 'react-dom';\n\n// We get hold of the div with the id modal that we have created in index.html\n\nconst modalRoot = document.getElementById( 'modal' );\n\nclass Modal extends React.Component \n{\n   constructor( props ) \n   {\n        super( props );\n        // We create an element div for this modal\n        this.element = document.createElement( 'div' );\n        this.element.className = 'modal-container';\n   }\n\n   // We append the created div to the div#modal\n   componentDidMount() \n   {\n        modalRoot.appendChild( this.element );\n   }\n\n  /**\n    * We remove the created div when this Modal Component is unmounted\n    * Used to clean up the memory to avoid memory leak \n    */\n\n   componentWillUnmount() \n   {\n      modalRoot.removeChild( this.element );\n   }\n\n    render()\n    {\n        return createPortal( this.props.children, this.element );\n    }\n}\nexport default Modal;","// Import supporting files\nimport React, { Fragment } from \"react\";\nimport axios from \"axios\";\nimport Navigation from '../navigation';\nimport Footer from '../footer';\nimport Modal from '../modal';\n\n// Create CheesecakePage component\n\nexport default class CheesecakePage extends React.Component\n{\n    /*\n        Constructor - this contstructor helps setup the state for the component.\n        cheesecakeTypes - array of types of cheesecakes from the database. Consists of 3 properties\n              index: Integer - index in database\n               type: String - description of the group of cheesecakes\n              price: Integer - general price of cheesecake group\n        cheeecakes - array of cheesecakes from the database. Consists of 8 properties\n                  index: Integer - index in database\n                   type: Integer - relational value to cheesecakeTypes index\n                  fruit: String - optional string describing fruit\n              specialty: String - optional string describing specialty\n                   name: String - name of cheesecake\n            description: String - description of cheesecake\n               adjprice: Integer - adjustable value to add value to cheesecake\n                  image: Blob - image for cheesecake\n        typesAreLoaded - boolean to indicate the cheesecake types were retrieved from the database\n        cheesecakesAreLoaded - boolean to indicate the cheesecakes were retrieved from the database\n        error - boolean to idicate an error occured during retrieving data\n        modalCheesecake - holds a cheesecake object for display in the modal\n        showModal - boolean to control the display of cheesecake modal popup\n    */\n\n    constructor(props) \n    {\n      super(props);\n\n      this.state = \n      {\n        cheesecakeTypes: null,\n        cheesecakes: null,\n        typesAreLoaded: false,\n        cheesecakesAreLoaded: false,\n        error: false,\n        modalCheesecake: null,\n        showModal: false\n      }\n\n    }\n\n    /**************************************************************************************************************\n        componentDidMount\n        parameters: N/A\n        Return: N/A\n        description: The componentDidMount function is used to makes calls to the database for the types of cheesecakes\n                     and the cheesecakes. If successful it will update the following information in the state:\n                     cheesecakeTypes, cheesecakes, typesAreLoaded, cheesecakesAreLoaded\n    **************************************************************************************************************/\n\n    componentDidMount()\n    {\n        var self = this;\n\n        // Make a call to the api for the complete list of cheesecake types\n        // http://localhost:5000/\n        // https://ttcapi.azurewebsites.net\n        axios.get(`https://ttcapi.azurewebsites.net/api/cheesecake-types`)\n        .then(response => {\n                        \n            // Set the state on successful return of cheesecake types data\n            this.setState({\n                typesAreLoaded: true,             // data is loaded\n                cheesecakeTypes: response.data    // set the cheesecakeTypes state variable to the response data\n            });\n        })\n        .catch(error => { \n\n            // Check to see if the server responded with an error and response for the error\n            if (error.response) \n                {\n                    // If the server responds with a status of 500 set the error state to true for the redirect to error page\n                    if (error.response.status === 500) \n                    {\n                        self.setState({error: true});\n                    }\n                } \n                else if (error.request) \n                {\n                    // The request was made but no response was received\n                    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                    // http.ClientRequest in node.js\n                    console.log(error.request);\n                } \n                else \n                {\n                    // Something happened in setting up the request that triggered an Error\n                    console.log('Error', error.message);\n                }\n\n                console.log(error.config); \n        })\n\n        // Make a call to the api for the complete list of cheesecakes\n        axios.get(`https://ttcapi.azurewebsites.net/api/cheesecakes`)\n        .then(response => {\n            \n            // Set the state on successful return of cheesecake data\n            this.setState({\n                cheesecakesAreLoaded: true,   // data is loaded\n                cheesecakes: response.data    // set the cheesecakes state variable to the response data\n            });\n        })\n        .catch(error => { \n\n            // Check to see if the server responded with an error and response for the error\n            if (error.response) \n                {\n                    // If the server responds with a status of 500 set the error state to true for the redirect to error page\n                    if (error.response.status === 500) \n                    {\n                        self.setState({error: true});\n                    }\n                } \n                else if (error.request) \n                {\n                    // The request was made but no response was received\n                    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                    // http.ClientRequest in node.js\n                    console.log(error.request);\n                } \n                else \n                {\n                    // Something happened in setting up the request that triggered an Error\n                    console.log('Error', error.message);\n                }\n\n                console.log(error.config); \n        })\n\n    }\n\n    /**************************************************************************************************************\n        toggleModal\n        parameters: event\n        Return: N/A\n        description: The toggleModal function takes an event and gets cheesecake data from the target clicked.\n                     With the cheesecake name, it loops though the state cheesecakes array looking for a match.\n                     if a match is found, the cheesecake object is set to the modal object and the modal is\n                     displayed.\n    **************************************************************************************************************/\n\n    toggleModal = (event) => \n    {\n        // obtain the cheesecake name from event target\n        let cheesecakeName = event.target.getAttribute('data-cheesecakename');\n        let modalCheesecake = null;\n\n        // setup modalCheesecake with a cheesecake object from the cheesecakes array\n        modalCheesecake = this.state.cheesecakes.filter( cheesecake => cheesecake.name === cheesecakeName);\n        \n        // update state with new modal and toggle the modal to show\n        this.setState({\n            showModal: !this.state.showModal, \n            modalCheesecake: modalCheesecake\n        })\n    };\n\n    render() \n    {\n        // Get necessary state variables\n        const { error, typesAreLoaded, cheesecakesAreLoaded, cheesecakes, cheesecakeTypes, showModal } = this.state;\n\n        // If we have the server response status of 500, redirect to error page\n        if (error) \n        {\n            //return <Redirect to='/error'/>;\n        } \n        // If we are waiting for the data to load...notify the user\n        else if (!typesAreLoaded || !cheesecakesAreLoaded) \n        {\n            return (\n                <Fragment>\n                    <Navigation />\n                    <div>Loading...</div>\n                </Fragment>\n            )\n            \n        } \n        else\n        {\n            return(\n                <Fragment>\n                     <Navigation/>\n                     {\n                         cheesecakeTypes.map( (type) => (\n\n                                <div key={type.index}>\n                                    <div className=\"collectionTitle\">\n                                        <br />\n                                        <br />\n                                        <p>{type.type[0].toUpperCase() + type.type.substring(1) + \" Cheesecakes\"}</p>\n                                    </div>\n                                    <div className=\"row\">\n                                        {\n                                            type.Cakes.map( (cake) => (\n                                                <div className=\"column\" key={cake.index}>\n                                                    <div className=\"imgContainer\">\n                                                        <img className=\"image\" src={cake.image} onClick={this.toggleModal} data-cheesecaketype={cake.type} data-cheesecakename={cake.name} data-cheesecakeindex={cake.index}/>\n                                                        <div className=\"middle\">\n                                                            <div className=\"text\" onClick={this.toggleModal} data-cheesecaketype={cake.type} data-cheesecakename={cake.name} data-cheesecakeindex={cake.index}>{cake.name}</div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            ))\n                                        }\n                                    </div>\n                                </div>\n                         ))\n                     }             \n                     {\n                         showModal ? \n                         (\n                            <Modal>\n                            <div className=\"modal\">\n                                 <button type=\"button\" id=\"modal-close-btn\" className=\"modal-close-btn\" onClick={this.toggleModal}><strong>X</strong></button>\n                                 <div className=\"modal-info-container\">\n                                     <img className=\"modal-img\" src={this.state.modalCheesecake[0].image} alt=\"profile picture\"/>\n                                     <p></p>\n                                     <h3 id=\"name\" className=\"modal-name cap\">{this.state.modalCheesecake[0].name}</h3>\n                                     <p className=\"modal-text\">Description: </p>\n                                     <p className=\"modal-text cap\">{this.state.modalCheesecake[0].description}</p>\n                                     <p className=\"modal-text\">Price: ${this.state.modalCheesecake[0].adjprice + this.state.modalCheesecake[0].Type.price} </p>\n                                 </div>\n                             </div>\n                            </Modal>\n                         ) : null\n                     }\n                     <Footer/>\n          \n                </Fragment>\n             );\n        }\n     }\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\nimport './App.css';\n\nimport HomePage from './components/mainPages/homePage';\nimport OrderPage from './components/mainPages/orderPage';\nimport CheesecakePage from './components/mainPages/cheesecakePage';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/TastefullyTiffanysCheesecakes\" component={HomePage}/>\n          <Route path=\"/TastefullyTiffanysCheesecakes/placeorder\" component={OrderPage}/>\n          <Route path=\"/TastefullyTiffanysCheesecakes/cheesecakes\" component={CheesecakePage}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\n{/* <Route exact path=\"/TastefullyTiffanysCheesecakes\" component={HomePage}/>\n          <Route path=\"/TastefullyTiffanysCheesecakes/placeorder\" component={OrderPage}/>\n          <Route path=\"/TastefullyTiffanysCheesecakes/cheesecakes\" component={CheesecakePage}/> */}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}